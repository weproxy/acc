/* automatically generated by rust-bindgen 0.59.2 */

pub const DYNAMIC_TARGETS_ENABLED: u32 = 0;
pub const TARGET_OS_MAC: u32 = 1;
pub const TARGET_OS_WIN32: u32 = 0;
pub const TARGET_OS_WINDOWS: u32 = 0;
pub const TARGET_OS_UNIX: u32 = 0;
pub const TARGET_OS_LINUX: u32 = 0;
pub const TARGET_OS_OSX: u32 = 1;
pub const TARGET_OS_IPHONE: u32 = 0;
pub const TARGET_OS_IOS: u32 = 0;
pub const TARGET_OS_WATCH: u32 = 0;
pub const TARGET_OS_TV: u32 = 0;
pub const TARGET_OS_MACCATALYST: u32 = 0;
pub const TARGET_OS_UIKITFORMAC: u32 = 0;
pub const TARGET_OS_SIMULATOR: u32 = 0;
pub const TARGET_OS_EMBEDDED: u32 = 0;
pub const TARGET_OS_RTKIT: u32 = 0;
pub const TARGET_OS_DRIVERKIT: u32 = 0;
pub const TARGET_IPHONE_SIMULATOR: u32 = 0;
pub const TARGET_OS_NANO: u32 = 0;
pub const TARGET_CPU_PPC: u32 = 0;
pub const TARGET_CPU_PPC64: u32 = 0;
pub const TARGET_CPU_68K: u32 = 0;
pub const TARGET_CPU_X86: u32 = 0;
pub const TARGET_CPU_X86_64: u32 = 0;
pub const TARGET_CPU_ARM: u32 = 0;
pub const TARGET_CPU_ARM64: u32 = 1;
pub const TARGET_CPU_MIPS: u32 = 0;
pub const TARGET_CPU_SPARC: u32 = 0;
pub const TARGET_CPU_ALPHA: u32 = 0;
pub const TARGET_RT_MAC_CFM: u32 = 0;
pub const TARGET_RT_MAC_MACHO: u32 = 1;
pub const TARGET_RT_LITTLE_ENDIAN: u32 = 1;
pub const TARGET_RT_BIG_ENDIAN: u32 = 0;
pub const TARGET_RT_64_BIT: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const __DARWIN_ONLY_VERS_1050: u32 = 1;
pub const __DARWIN_UNIX03: u32 = 1;
pub const __DARWIN_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_VERS_1050: u32 = 1;
pub const __DARWIN_NON_CANCELABLE: u32 = 0;
pub const __DARWIN_SUF_EXTSN: &[u8; 14usize] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: u32 = 4096;
pub const __DARWIN_C_FULL: u32 = 900000;
pub const __DARWIN_C_LEVEL: u32 = 900000;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const __DARWIN_NO_LONG_LONG: u32 = 0;
pub const _DARWIN_FEATURE_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_VERS_1050: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
pub const __has_ptrcheck: u32 = 0;
pub const __PTHREAD_SIZE__: u32 = 8176;
pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
pub const __PTHREAD_COND_SIZE__: u32 = 40;
pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const UINTPTR_MAX: i32 = -1;
pub const SIZE_MAX: i32 = -1;
pub const RSIZE_MAX: i32 = -1;
pub const WINT_MIN: i32 = -2147483648;
pub const WINT_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const __GNUC_VA_LIST: u32 = 1;
pub const __API_TO_BE_DEPRECATED: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_MACOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_IOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_TVOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_WATCHOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_MACCATALYST: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_DRIVERKIT: u32 = 100000;
pub const __MAC_10_0: u32 = 1000;
pub const __MAC_10_1: u32 = 1010;
pub const __MAC_10_2: u32 = 1020;
pub const __MAC_10_3: u32 = 1030;
pub const __MAC_10_4: u32 = 1040;
pub const __MAC_10_5: u32 = 1050;
pub const __MAC_10_6: u32 = 1060;
pub const __MAC_10_7: u32 = 1070;
pub const __MAC_10_8: u32 = 1080;
pub const __MAC_10_9: u32 = 1090;
pub const __MAC_10_10: u32 = 101000;
pub const __MAC_10_10_2: u32 = 101002;
pub const __MAC_10_10_3: u32 = 101003;
pub const __MAC_10_11: u32 = 101100;
pub const __MAC_10_11_2: u32 = 101102;
pub const __MAC_10_11_3: u32 = 101103;
pub const __MAC_10_11_4: u32 = 101104;
pub const __MAC_10_12: u32 = 101200;
pub const __MAC_10_12_1: u32 = 101201;
pub const __MAC_10_12_2: u32 = 101202;
pub const __MAC_10_12_4: u32 = 101204;
pub const __MAC_10_13: u32 = 101300;
pub const __MAC_10_13_1: u32 = 101301;
pub const __MAC_10_13_2: u32 = 101302;
pub const __MAC_10_13_4: u32 = 101304;
pub const __MAC_10_14: u32 = 101400;
pub const __MAC_10_14_1: u32 = 101401;
pub const __MAC_10_14_4: u32 = 101404;
pub const __MAC_10_14_6: u32 = 101406;
pub const __MAC_10_15: u32 = 101500;
pub const __MAC_10_15_1: u32 = 101501;
pub const __MAC_10_15_4: u32 = 101504;
pub const __MAC_10_16: u32 = 101600;
pub const __MAC_11_0: u32 = 110000;
pub const __MAC_11_1: u32 = 110100;
pub const __MAC_11_3: u32 = 110300;
pub const __MAC_11_4: u32 = 110400;
pub const __MAC_11_5: u32 = 110500;
pub const __MAC_11_6: u32 = 110600;
pub const __MAC_12_0: u32 = 120000;
pub const __MAC_12_1: u32 = 120100;
pub const __MAC_12_2: u32 = 120200;
pub const __MAC_12_3: u32 = 120300;
pub const __MAC_13_0: u32 = 130000;
pub const __IPHONE_2_0: u32 = 20000;
pub const __IPHONE_2_1: u32 = 20100;
pub const __IPHONE_2_2: u32 = 20200;
pub const __IPHONE_3_0: u32 = 30000;
pub const __IPHONE_3_1: u32 = 30100;
pub const __IPHONE_3_2: u32 = 30200;
pub const __IPHONE_4_0: u32 = 40000;
pub const __IPHONE_4_1: u32 = 40100;
pub const __IPHONE_4_2: u32 = 40200;
pub const __IPHONE_4_3: u32 = 40300;
pub const __IPHONE_5_0: u32 = 50000;
pub const __IPHONE_5_1: u32 = 50100;
pub const __IPHONE_6_0: u32 = 60000;
pub const __IPHONE_6_1: u32 = 60100;
pub const __IPHONE_7_0: u32 = 70000;
pub const __IPHONE_7_1: u32 = 70100;
pub const __IPHONE_8_0: u32 = 80000;
pub const __IPHONE_8_1: u32 = 80100;
pub const __IPHONE_8_2: u32 = 80200;
pub const __IPHONE_8_3: u32 = 80300;
pub const __IPHONE_8_4: u32 = 80400;
pub const __IPHONE_9_0: u32 = 90000;
pub const __IPHONE_9_1: u32 = 90100;
pub const __IPHONE_9_2: u32 = 90200;
pub const __IPHONE_9_3: u32 = 90300;
pub const __IPHONE_10_0: u32 = 100000;
pub const __IPHONE_10_1: u32 = 100100;
pub const __IPHONE_10_2: u32 = 100200;
pub const __IPHONE_10_3: u32 = 100300;
pub const __IPHONE_11_0: u32 = 110000;
pub const __IPHONE_11_1: u32 = 110100;
pub const __IPHONE_11_2: u32 = 110200;
pub const __IPHONE_11_3: u32 = 110300;
pub const __IPHONE_11_4: u32 = 110400;
pub const __IPHONE_12_0: u32 = 120000;
pub const __IPHONE_12_1: u32 = 120100;
pub const __IPHONE_12_2: u32 = 120200;
pub const __IPHONE_12_3: u32 = 120300;
pub const __IPHONE_12_4: u32 = 120400;
pub const __IPHONE_13_0: u32 = 130000;
pub const __IPHONE_13_1: u32 = 130100;
pub const __IPHONE_13_2: u32 = 130200;
pub const __IPHONE_13_3: u32 = 130300;
pub const __IPHONE_13_4: u32 = 130400;
pub const __IPHONE_13_5: u32 = 130500;
pub const __IPHONE_13_6: u32 = 130600;
pub const __IPHONE_13_7: u32 = 130700;
pub const __IPHONE_14_0: u32 = 140000;
pub const __IPHONE_14_1: u32 = 140100;
pub const __IPHONE_14_2: u32 = 140200;
pub const __IPHONE_14_3: u32 = 140300;
pub const __IPHONE_14_5: u32 = 140500;
pub const __IPHONE_14_6: u32 = 140600;
pub const __IPHONE_14_7: u32 = 140700;
pub const __IPHONE_14_8: u32 = 140800;
pub const __IPHONE_15_0: u32 = 150000;
pub const __IPHONE_15_1: u32 = 150100;
pub const __IPHONE_15_2: u32 = 150200;
pub const __IPHONE_15_3: u32 = 150300;
pub const __IPHONE_15_4: u32 = 150400;
pub const __IPHONE_16_0: u32 = 160000;
pub const __IPHONE_16_1: u32 = 160100;
pub const __TVOS_9_0: u32 = 90000;
pub const __TVOS_9_1: u32 = 90100;
pub const __TVOS_9_2: u32 = 90200;
pub const __TVOS_10_0: u32 = 100000;
pub const __TVOS_10_0_1: u32 = 100001;
pub const __TVOS_10_1: u32 = 100100;
pub const __TVOS_10_2: u32 = 100200;
pub const __TVOS_11_0: u32 = 110000;
pub const __TVOS_11_1: u32 = 110100;
pub const __TVOS_11_2: u32 = 110200;
pub const __TVOS_11_3: u32 = 110300;
pub const __TVOS_11_4: u32 = 110400;
pub const __TVOS_12_0: u32 = 120000;
pub const __TVOS_12_1: u32 = 120100;
pub const __TVOS_12_2: u32 = 120200;
pub const __TVOS_12_3: u32 = 120300;
pub const __TVOS_12_4: u32 = 120400;
pub const __TVOS_13_0: u32 = 130000;
pub const __TVOS_13_2: u32 = 130200;
pub const __TVOS_13_3: u32 = 130300;
pub const __TVOS_13_4: u32 = 130400;
pub const __TVOS_14_0: u32 = 140000;
pub const __TVOS_14_1: u32 = 140100;
pub const __TVOS_14_2: u32 = 140200;
pub const __TVOS_14_3: u32 = 140300;
pub const __TVOS_14_5: u32 = 140500;
pub const __TVOS_14_6: u32 = 140600;
pub const __TVOS_14_7: u32 = 140700;
pub const __TVOS_15_0: u32 = 150000;
pub const __TVOS_15_1: u32 = 150100;
pub const __TVOS_15_2: u32 = 150200;
pub const __TVOS_15_3: u32 = 150300;
pub const __TVOS_15_4: u32 = 150400;
pub const __TVOS_16_0: u32 = 160000;
pub const __TVOS_16_1: u32 = 160100;
pub const __WATCHOS_1_0: u32 = 10000;
pub const __WATCHOS_2_0: u32 = 20000;
pub const __WATCHOS_2_1: u32 = 20100;
pub const __WATCHOS_2_2: u32 = 20200;
pub const __WATCHOS_3_0: u32 = 30000;
pub const __WATCHOS_3_1: u32 = 30100;
pub const __WATCHOS_3_1_1: u32 = 30101;
pub const __WATCHOS_3_2: u32 = 30200;
pub const __WATCHOS_4_0: u32 = 40000;
pub const __WATCHOS_4_1: u32 = 40100;
pub const __WATCHOS_4_2: u32 = 40200;
pub const __WATCHOS_4_3: u32 = 40300;
pub const __WATCHOS_5_0: u32 = 50000;
pub const __WATCHOS_5_1: u32 = 50100;
pub const __WATCHOS_5_2: u32 = 50200;
pub const __WATCHOS_5_3: u32 = 50300;
pub const __WATCHOS_6_0: u32 = 60000;
pub const __WATCHOS_6_1: u32 = 60100;
pub const __WATCHOS_6_2: u32 = 60200;
pub const __WATCHOS_7_0: u32 = 70000;
pub const __WATCHOS_7_1: u32 = 70100;
pub const __WATCHOS_7_2: u32 = 70200;
pub const __WATCHOS_7_3: u32 = 70300;
pub const __WATCHOS_7_4: u32 = 70400;
pub const __WATCHOS_7_5: u32 = 70500;
pub const __WATCHOS_7_6: u32 = 70600;
pub const __WATCHOS_8_0: u32 = 80000;
pub const __WATCHOS_8_1: u32 = 80100;
pub const __WATCHOS_8_3: u32 = 80300;
pub const __WATCHOS_8_4: u32 = 80400;
pub const __WATCHOS_8_5: u32 = 80500;
pub const __WATCHOS_9_0: u32 = 90000;
pub const __WATCHOS_9_1: u32 = 90100;
pub const MAC_OS_X_VERSION_10_0: u32 = 1000;
pub const MAC_OS_X_VERSION_10_1: u32 = 1010;
pub const MAC_OS_X_VERSION_10_2: u32 = 1020;
pub const MAC_OS_X_VERSION_10_3: u32 = 1030;
pub const MAC_OS_X_VERSION_10_4: u32 = 1040;
pub const MAC_OS_X_VERSION_10_5: u32 = 1050;
pub const MAC_OS_X_VERSION_10_6: u32 = 1060;
pub const MAC_OS_X_VERSION_10_7: u32 = 1070;
pub const MAC_OS_X_VERSION_10_8: u32 = 1080;
pub const MAC_OS_X_VERSION_10_9: u32 = 1090;
pub const MAC_OS_X_VERSION_10_10: u32 = 101000;
pub const MAC_OS_X_VERSION_10_10_2: u32 = 101002;
pub const MAC_OS_X_VERSION_10_10_3: u32 = 101003;
pub const MAC_OS_X_VERSION_10_11: u32 = 101100;
pub const MAC_OS_X_VERSION_10_11_2: u32 = 101102;
pub const MAC_OS_X_VERSION_10_11_3: u32 = 101103;
pub const MAC_OS_X_VERSION_10_11_4: u32 = 101104;
pub const MAC_OS_X_VERSION_10_12: u32 = 101200;
pub const MAC_OS_X_VERSION_10_12_1: u32 = 101201;
pub const MAC_OS_X_VERSION_10_12_2: u32 = 101202;
pub const MAC_OS_X_VERSION_10_12_4: u32 = 101204;
pub const MAC_OS_X_VERSION_10_13: u32 = 101300;
pub const MAC_OS_X_VERSION_10_13_1: u32 = 101301;
pub const MAC_OS_X_VERSION_10_13_2: u32 = 101302;
pub const MAC_OS_X_VERSION_10_13_4: u32 = 101304;
pub const MAC_OS_X_VERSION_10_14: u32 = 101400;
pub const MAC_OS_X_VERSION_10_14_1: u32 = 101401;
pub const MAC_OS_X_VERSION_10_14_4: u32 = 101404;
pub const MAC_OS_X_VERSION_10_14_6: u32 = 101406;
pub const MAC_OS_X_VERSION_10_15: u32 = 101500;
pub const MAC_OS_X_VERSION_10_15_1: u32 = 101501;
pub const MAC_OS_X_VERSION_10_16: u32 = 101600;
pub const MAC_OS_VERSION_11_0: u32 = 110000;
pub const MAC_OS_VERSION_12_0: u32 = 120000;
pub const MAC_OS_VERSION_13_0: u32 = 130000;
pub const __DRIVERKIT_19_0: u32 = 190000;
pub const __DRIVERKIT_20_0: u32 = 200000;
pub const __DRIVERKIT_21_0: u32 = 210000;
pub const __MAC_OS_X_VERSION_MAX_ALLOWED: u32 = 130000;
pub const __ENABLE_LEGACY_MAC_AVAILABILITY: u32 = 1;
pub const ASL_API_VERSION: u32 = 20150225;
pub const ASL_LEVEL_EMERG: u32 = 0;
pub const ASL_LEVEL_ALERT: u32 = 1;
pub const ASL_LEVEL_CRIT: u32 = 2;
pub const ASL_LEVEL_ERR: u32 = 3;
pub const ASL_LEVEL_WARNING: u32 = 4;
pub const ASL_LEVEL_NOTICE: u32 = 5;
pub const ASL_LEVEL_INFO: u32 = 6;
pub const ASL_LEVEL_DEBUG: u32 = 7;
pub const ASL_STRING_EMERG: &[u8; 10usize] = b"Emergency\0";
pub const ASL_STRING_ALERT: &[u8; 6usize] = b"Alert\0";
pub const ASL_STRING_CRIT: &[u8; 9usize] = b"Critical\0";
pub const ASL_STRING_ERR: &[u8; 6usize] = b"Error\0";
pub const ASL_STRING_WARNING: &[u8; 8usize] = b"Warning\0";
pub const ASL_STRING_NOTICE: &[u8; 7usize] = b"Notice\0";
pub const ASL_STRING_INFO: &[u8; 5usize] = b"Info\0";
pub const ASL_STRING_DEBUG: &[u8; 6usize] = b"Debug\0";
pub const ASL_QUERY_OP_CASEFOLD: u32 = 16;
pub const ASL_QUERY_OP_PREFIX: u32 = 32;
pub const ASL_QUERY_OP_SUFFIX: u32 = 64;
pub const ASL_QUERY_OP_SUBSTRING: u32 = 96;
pub const ASL_QUERY_OP_NUMERIC: u32 = 128;
pub const ASL_QUERY_OP_REGEX: u32 = 256;
pub const ASL_QUERY_OP_EQUAL: u32 = 1;
pub const ASL_QUERY_OP_GREATER: u32 = 2;
pub const ASL_QUERY_OP_GREATER_EQUAL: u32 = 3;
pub const ASL_QUERY_OP_LESS: u32 = 4;
pub const ASL_QUERY_OP_LESS_EQUAL: u32 = 5;
pub const ASL_QUERY_OP_NOT_EQUAL: u32 = 6;
pub const ASL_QUERY_OP_TRUE: u32 = 7;
pub const ASL_KEY_TIME: &[u8; 5usize] = b"Time\0";
pub const ASL_KEY_TIME_NSEC: &[u8; 12usize] = b"TimeNanoSec\0";
pub const ASL_KEY_HOST: &[u8; 5usize] = b"Host\0";
pub const ASL_KEY_SENDER: &[u8; 7usize] = b"Sender\0";
pub const ASL_KEY_FACILITY: &[u8; 9usize] = b"Facility\0";
pub const ASL_KEY_PID: &[u8; 4usize] = b"PID\0";
pub const ASL_KEY_UID: &[u8; 4usize] = b"UID\0";
pub const ASL_KEY_GID: &[u8; 4usize] = b"GID\0";
pub const ASL_KEY_LEVEL: &[u8; 6usize] = b"Level\0";
pub const ASL_KEY_MSG: &[u8; 8usize] = b"Message\0";
pub const ASL_KEY_READ_UID: &[u8; 8usize] = b"ReadUID\0";
pub const ASL_KEY_READ_GID: &[u8; 8usize] = b"ReadGID\0";
pub const ASL_KEY_EXPIRE_TIME: &[u8; 14usize] = b"ASLExpireTime\0";
pub const ASL_KEY_MSG_ID: &[u8; 13usize] = b"ASLMessageID\0";
pub const ASL_KEY_SESSION: &[u8; 8usize] = b"Session\0";
pub const ASL_KEY_REF_PID: &[u8; 7usize] = b"RefPID\0";
pub const ASL_KEY_REF_PROC: &[u8; 8usize] = b"RefProc\0";
pub const ASL_KEY_AUX_TITLE: &[u8; 12usize] = b"ASLAuxTitle\0";
pub const ASL_KEY_AUX_UTI: &[u8; 10usize] = b"ASLAuxUTI\0";
pub const ASL_KEY_AUX_URL: &[u8; 10usize] = b"ASLAuxURL\0";
pub const ASL_KEY_AUX_DATA: &[u8; 11usize] = b"ASLAuxData\0";
pub const ASL_KEY_OPTION: &[u8; 10usize] = b"ASLOption\0";
pub const ASL_KEY_MODULE: &[u8; 10usize] = b"ASLModule\0";
pub const ASL_KEY_SENDER_INSTANCE: &[u8; 15usize] = b"SenderInstance\0";
pub const ASL_KEY_SENDER_MACH_UUID: &[u8; 15usize] = b"SenderMachUUID\0";
pub const ASL_KEY_FINAL_NOTIFICATION: &[u8; 21usize] = b"ASLFinalNotification\0";
pub const ASL_KEY_OS_ACTIVITY_ID: &[u8; 13usize] = b"OSActivityID\0";
pub const ASL_TYPE_UNDEF: u32 = 4294967295;
pub const ASL_TYPE_MSG: u32 = 0;
pub const ASL_TYPE_QUERY: u32 = 1;
pub const ASL_TYPE_LIST: u32 = 2;
pub const ASL_TYPE_FILE: u32 = 3;
pub const ASL_TYPE_STORE: u32 = 4;
pub const ASL_TYPE_CLIENT: u32 = 5;
pub const ASL_MATCH_DIRECTION_FORWARD: u32 = 1;
pub const ASL_MATCH_DIRECTION_REVERSE: i32 = -1;
pub const ASL_FILTER_MASK_EMERG: u32 = 1;
pub const ASL_FILTER_MASK_ALERT: u32 = 2;
pub const ASL_FILTER_MASK_CRIT: u32 = 4;
pub const ASL_FILTER_MASK_ERR: u32 = 8;
pub const ASL_FILTER_MASK_WARNING: u32 = 16;
pub const ASL_FILTER_MASK_NOTICE: u32 = 32;
pub const ASL_FILTER_MASK_INFO: u32 = 64;
pub const ASL_FILTER_MASK_DEBUG: u32 = 128;
pub const ASL_OPT_STDERR: u32 = 1;
pub const ASL_OPT_NO_DELAY: u32 = 2;
pub const ASL_OPT_NO_REMOTE: u32 = 4;
pub const ASL_OPT_OPEN_WRITE: u32 = 1;
pub const ASL_OPT_CREATE_STORE: u32 = 2;
pub const ASL_LOG_DESCRIPTOR_READ: u32 = 1;
pub const ASL_LOG_DESCRIPTOR_WRITE: u32 = 2;
pub const ASL_MSG_FMT_RAW: &[u8; 4usize] = b"raw\0";
pub const ASL_MSG_FMT_STD: &[u8; 4usize] = b"std\0";
pub const ASL_MSG_FMT_BSD: &[u8; 4usize] = b"bsd\0";
pub const ASL_MSG_FMT_XML: &[u8; 4usize] = b"xml\0";
pub const ASL_MSG_FMT_MSG: &[u8; 4usize] = b"msg\0";
pub const ASL_TIME_FMT_SEC: &[u8; 4usize] = b"sec\0";
pub const ASL_TIME_FMT_UTC: &[u8; 4usize] = b"utc\0";
pub const ASL_TIME_FMT_LCL: &[u8; 4usize] = b"lcl\0";
pub const ASL_ENCODE_NONE: u32 = 0;
pub const ASL_ENCODE_SAFE: u32 = 1;
pub const ASL_ENCODE_ASL: u32 = 2;
pub const ASL_ENCODE_XML: u32 = 3;
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type int_fast16_t = i16;
pub type int_fast32_t = i32;
pub type int_fast64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast16_t = u16;
pub type uint_fast32_t = u32;
pub type uint_fast64_t = u64;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: ::std::os::raw::c_longlong,
}
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = i64;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = i64;
pub type user_long_t = i64;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = i64;
pub type user_off_t = i64;
pub type syscall_arg_t = u_int64_t;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
pub type size_t = ::std::os::raw::c_ulong;
pub type rsize_t = ::std::os::raw::c_ulong;
pub type wchar_t = ::std::os::raw::c_int;
pub type max_align_t = f64;
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __asl_object_s {
    _unused: [u8; 0],
}
pub type asl_object_t = *mut __asl_object_s;
pub type aslclient = asl_object_t;
pub type aslmsg = asl_object_t;
pub type aslresponse = asl_object_t;
extern "C" {
    pub fn _asl_lib_log(
        client: asl_object_t,
        eval: u32,
        msg: asl_object_t,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _asl_evaluate_send(
        client: asl_object_t,
        msg: asl_object_t,
        level: ::std::os::raw::c_int,
    ) -> u32;
}
extern "C" {
    pub fn asl_open(
        ident: *const ::std::os::raw::c_char,
        facility: *const ::std::os::raw::c_char,
        opts: u32,
    ) -> asl_object_t;
}
extern "C" {
    pub fn asl_open_path(path: *const ::std::os::raw::c_char, opts: u32) -> asl_object_t;
}
extern "C" {
    pub fn asl_close(obj: asl_object_t);
}
extern "C" {
    pub fn asl_add_log_file(
        client: asl_object_t,
        descriptor: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asl_add_output_file(
        client: asl_object_t,
        fd: ::std::os::raw::c_int,
        mfmt: *const ::std::os::raw::c_char,
        tfmt: *const ::std::os::raw::c_char,
        filter: ::std::os::raw::c_int,
        text_encoding: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asl_set_output_file_filter(
        client: asl_object_t,
        fd: ::std::os::raw::c_int,
        filter: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asl_remove_log_file(
        client: asl_object_t,
        descriptor: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asl_set_filter(client: asl_object_t, f: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asl_key(msg: asl_object_t, n: u32) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn asl_fetch_key_val_op(
        msg: asl_object_t,
        n: u32,
        key: *mut *const ::std::os::raw::c_char,
        val: *mut *const ::std::os::raw::c_char,
        op: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asl_new(type_: u32) -> asl_object_t;
}
extern "C" {
    pub fn asl_set(
        obj: asl_object_t,
        key: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asl_unset(
        obj: asl_object_t,
        key: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asl_get(
        msg: asl_object_t,
        key: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn asl_log(
        client: asl_object_t,
        msg: asl_object_t,
        level: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asl_log_message(
        level: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asl_vlog(
        obj: asl_object_t,
        msg: asl_object_t,
        level: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        ap: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asl_send(obj: asl_object_t, msg: asl_object_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asl_free(obj: asl_object_t);
}
extern "C" {
    pub fn asl_retain(obj: asl_object_t) -> asl_object_t;
}
extern "C" {
    pub fn asl_release(obj: asl_object_t);
}
extern "C" {
    pub fn asl_get_type(obj: asl_object_t) -> u32;
}
extern "C" {
    pub fn asl_set_query(
        msg: asl_object_t,
        key: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
        op: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asl_search(obj: asl_object_t, query: asl_object_t) -> asl_object_t;
}
extern "C" {
    pub fn aslresponse_next(obj: asl_object_t) -> asl_object_t;
}
extern "C" {
    pub fn aslresponse_free(obj: asl_object_t);
}
extern "C" {
    pub fn asl_append(obj: asl_object_t, obj_to_add: asl_object_t);
}
extern "C" {
    pub fn asl_prepend(obj: asl_object_t, obj_to_add: asl_object_t);
}
extern "C" {
    pub fn asl_count(obj: asl_object_t) -> size_t;
}
extern "C" {
    pub fn asl_get_index(list: asl_object_t, index: size_t) -> asl_object_t;
}
extern "C" {
    pub fn asl_remove_index(list: asl_object_t, index: size_t);
}
extern "C" {
    pub fn asl_create_auxiliary_file(
        msg: asl_object_t,
        title: *const ::std::os::raw::c_char,
        uti: *const ::std::os::raw::c_char,
        out_descriptor: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asl_close_auxiliary_file(descriptor: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asl_log_auxiliary_location(
        msg: asl_object_t,
        title: *const ::std::os::raw::c_char,
        uti: *const ::std::os::raw::c_char,
        url: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asl_open_from_file(
        descriptor: ::std::os::raw::c_int,
        ident: *const ::std::os::raw::c_char,
        facility: *const ::std::os::raw::c_char,
    ) -> asl_object_t;
}
extern "C" {
    pub fn asl_log_descriptor(
        asl: asl_object_t,
        msg: asl_object_t,
        level: ::std::os::raw::c_int,
        descriptor: ::std::os::raw::c_int,
        fd_type: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asl_format(
        msg: asl_object_t,
        msg_fmt: *const ::std::os::raw::c_char,
        time_fmt: *const ::std::os::raw::c_char,
        text_encoding: u32,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn asl_encode_buffer(
        buf: *const ::std::os::raw::c_char,
        len: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn asl_decode_buffer(
        in_: *const ::std::os::raw::c_char,
        buf: *mut *mut ::std::os::raw::c_char,
        len: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asl_next(obj: asl_object_t) -> asl_object_t;
}
extern "C" {
    pub fn asl_prev(obj: asl_object_t) -> asl_object_t;
}
extern "C" {
    pub fn asl_reset_iteration(obj: asl_object_t, position: size_t);
}
extern "C" {
    pub fn asl_match(
        data: asl_object_t,
        querylist: asl_object_t,
        last: *mut size_t,
        start: size_t,
        count: size_t,
        duration: u32,
        direction: i32,
    ) -> asl_object_t;
}
pub type __builtin_va_list = *mut ::std::os::raw::c_char;
